#!/usr/bin/env bash
# OpenWrt Build Helper Script
# Version: 0.4.1 (dev)
# Author: github.com/Ogglord

set -uo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
GRAY='\033[0;90m'
NC='\033[0m'

LOG_ARGS="-v"
MAKE_COMMANDS=""

# Create ccache directory on host
mkdir -p ~/.cache/ccache

# Set environment variables
export CCACHE_DIR=~/.cache/ccache
export USE_CCACHE=1
export CCACHE_MAXSIZE=50G  # Adjust based on available space

echo "ccache directory: $CCACHE_DIR"

# Find the stdout-filter executable
if command -v owrt-log-filter >/dev/null 2>&1; then
    LOG_FILTER="owrt-log-filter"
else
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    if [ -x "$SCRIPT_DIR/owrt-log-filter" ]; then
        LOG_FILTER="$SCRIPT_DIR/owrt-log-filter"
    else
        echo -e "${RED}[ERROR]${NC} ${GRAY}owrt-log-filter${NC} executable not found in PATH or in $SCRIPT_DIR" >&2
        exit 1
    fi
fi

# Logging configuration
LOG_DIR="./build_logs"
mkdir -p "$LOG_DIR" 2>/dev/null || { echo -e "${RED}[ERROR]${NC} Cannot create log directory: $LOG_DIR" >&2; exit 1; }

# Logging function
log() {
    local level="$1"
    local message="$2"
    local log_file="${LOG_DIR}/${level}.log"

    case "$level" in
        "error") echo -e "${RED}[ERROR]${NC} $message" >&2 ;;
        "warning") echo -e "${YELLOW}[WARNING]${NC} $message" >&2 ;;
        "info") echo -e "${GREEN}[INFO]${NC} $message" ;;
        *) echo "$message" ;;
    esac

    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $level: $message" >> "$log_file"
}

# Function to check if current directory is an OpenWrt source folder
check_openwrt_source() {
    local required_dirs=("scripts" "package" "target" "toolchain")
    local required_files=("Makefile" "scripts/feeds")

    for dir in "${required_dirs[@]}"; do
        [ ! -d "$dir" ] && log "error" "Missing directory: $dir" && return 1
    done

    for file in "${required_files[@]}"; do
        [ ! -f "$file" ] && log "error" "Missing file: $file" && return 1
    done

    log "info" "Source directory valid"
    return 0
}

# Function to check dependencies
check_dependencies() {
    local deps=(make git sed)
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log "error" "Missing required command: $dep"
            return 1
        fi
    done
}

# Function to display usage information
usage() {
    cat << EOF
OpenWrt Build Helper Script
Version: 0.4.1

Usage: $0 <mode>

Modes:                                      | Log file:
  all    - Update+Install Feeds               feeds.log    +
           Download,                          download.log +
           Build                              build.log
  world  - Build only                         build.log
  debug  - Build (single thread verbose)      build_debug.log
  feeds  - Update+Install Feeds only          feeds.log
  -----
  update - Self-update all helper executables from git
EOF
    exit 1
}

update_install_feeds() {
    local REMOVE_APPS="audit busybox kexec-tools lldpd policycoreutils"

    log "info" "Updating feeds"
    ./scripts/feeds update -a 2>&1 | tee "$LOG_DIR/feeds.log" | "$LOG_FILTER" $LOG_ARGS || { log "error" "Feed update failed"; exit 1; }
    ./scripts/feeds install -a 2>&1 | tee -a "$LOG_DIR/feeds.log" | "$LOG_FILTER" $LOG_ARGS || { log "error" "Feed installation failed"; exit 1; }

    log "info" "Reinstalling problematic packages"
    ./scripts/feeds uninstall $REMOVE_APPS 2>&1 | tee -a "$LOG_DIR/feeds.log" | "$LOG_FILTER" $LOG_ARGS || log "warning" "Package uninstall incomplete - continuing"
    ./scripts/feeds install -a 2>&1 | tee -a "$LOG_DIR/feeds.log" | "$LOG_FILTER" $LOG_ARGS || { log "error" "Feed reinstallation failed"; exit 1; }

    log "info" "Feeds updated - logs: $LOG_DIR/feeds.log"
}

download_apps() {
    log "info" "Downloading packages"
    make -j1 download 2>&1 | tee "$LOG_DIR/download.log" | "${LOG_FILTER}" -vv || { log "error" "Package download failed"; exit 1; }
    log "info" "Downloads complete - logs: $LOG_DIR/download.log"
}

run_llvm_fix() {
    log "info" "Configuring LLVM toolchain"
    [ ! -x "/usr/local/bin/owrt-llvm-config" ] && { log "error" "LLVM fix script not found"; exit 1; }
    /usr/local/bin/owrt-llvm-config 2>&1 | tee "$LOG_DIR/owrt-llvm-config.log" | "$LOG_FILTER" $LOG_ARGS || { log "error" "LLVM fix failed"; exit 1; }
}

build() {
    run_llvm_fix

    log "info" "Running defconfig"
    make defconfig 2>&1 | tee "$LOG_DIR/defconfig.log" | "$LOG_FILTER" $LOG_ARGS || { log "error" "defconfig failed"; exit 1; }

    ccache -z  # Zero stats
    local log_file="$LOG_DIR/build.log"
    local build_cmd="make -j$(($(nproc)+1)) V=s world"

    if [ "$MODE" = "debug" ]; then
        log_file="$LOG_DIR/build_debug.log"
        build_cmd="make -j1 V=s world"
    fi

    log "info" "Building OpenWrt${MODE:+ ($MODE mode)}"
    $build_cmd 2>&1 | tee "$log_file" | "$LOG_FILTER" $LOG_ARGS || { log "error" "Build failed - see $log_file"; exit 1; }
    echo -e "${GREEN}"
    cat << 'EOF'
     ____  _   _  ____ ____ _____ ____ ____  _
    / ___|| | | |/ ___/ ___| ____/ ___/ ___|| |
    \___ \| | | | |  | |   |  _| \___ \___ \| |
     ___) | |_| | |__| |___| |___ ___) |__) |_|
    |____/ \___/ \____\____|_____|____/____/(_)
EOF
    log "info" "Build complete - Log files can be found in: $LOG_DIR"

    ccache -s  # Should show hits/misses
}

self_update() {
    log "info" "Running self-update using sudo"
    [ ! -x "/usr/local/bin/owrt-update" ] && { log "error" "Update script not found"; exit 1; }
    sudo /usr/local/bin/owrt-update || { log "error" "Self-update failed"; exit 1; }
}

# Main execution
echo -e "${GREEN}OpenWrt Build Helper Script version 0.3${NC} - github.com/Ogglord"
echo "-"

MODE="${1:-}"
[ -z "$MODE" ] && { log "error" "No build mode specified"; usage; }

case "$MODE" in
    all|world|debug|feeds|update) : ;;
    *) log "error" "Invalid mode: $MODE"; usage ;;
esac

check_openwrt_source || exit 1
check_dependencies || exit 1

case "$MODE" in
    all) update_install_feeds; download_apps; build ;;
    world|debug) build ;;
    feeds) update_install_feeds ;;
    update) self_update ;;
esac

log "info" "Build completed (${MODE^^}) - logs: $LOG_DIR"
